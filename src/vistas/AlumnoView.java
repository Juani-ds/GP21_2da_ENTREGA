/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import javax.swing.JOptionPane;
import modelos.Alumno;
import persistencia.AlumnoData;

/**
 *
 * @author Usuario
 */
public class AlumnoView extends javax.swing.JInternalFrame {

    /**
     * Creates new form AlumnoView
     */
    private AlumnoData alumnoData;
    public AlumnoView() {
        initComponents();
        
        AlumnoData alumnoData = new AlumnoData();
        
        textID.addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyReleased(java.awt.event.KeyEvent e) {
                String texto = textID.getText().trim();

                if (!texto.isEmpty()) {
                    try {
                        int id = Integer.parseInt(texto);


                        Alumno alumno = alumnoData.buscarAlumnoPorId(id);

                        if (alumno != null) {
                            jTextNombre.setText(alumno.getNombre());
                            jTextApellido.setText(alumno.getApellido());
                            jTextDni.setText(String.valueOf(alumno.getDni()));
                            jDateNacimiento.setDate(java.sql.Date.valueOf(alumno.getFechaNacimiento()));
                            jRButtonEstado.setSelected(alumno.isEstado());
                        } else {
                            // Si el ID no existe, limpia los campos
                            limpiarCampos();
                        }

                    } catch (NumberFormatException ex) {
                        // Si el texto no es un número válido, limpia los campos
                        limpiarCampos();
                    }
                } else {
                    // Si el campo de ID queda vacío, limpia los campos
                    limpiarCampos();
                }
        }
    });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        textID = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextNombre = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jDateNacimiento = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        jRButtonEstado = new javax.swing.JRadioButton();
        jButtonGuardar = new javax.swing.JButton();
        jButtonBorrar = new javax.swing.JButton();
        jButtonAct = new javax.swing.JButton();
        jButtonClean = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jTextApellido = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextDni = new javax.swing.JTextField();

        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText("ALUMNO");

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel2.setBackground(new java.awt.Color(153, 255, 153));
        jLabel2.setText("ID");

        textID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textIDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(textID, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(textID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel3.setText("Nombre:");

        jLabel4.setText("Fecha de Nac:");

        jLabel5.setText("Activo:");

        jButtonGuardar.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButtonGuardar.setText("Guardar");
        jButtonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarActionPerformed(evt);
            }
        });

        jButtonBorrar.setText("Borrar");
        jButtonBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBorrarActionPerformed(evt);
            }
        });

        jButtonAct.setText("Actualizar");
        jButtonAct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActActionPerformed(evt);
            }
        });

        jButtonClean.setText("Limpiar");
        jButtonClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCleanActionPerformed(evt);
            }
        });

        jLabel7.setText("Apellido:");

        jLabel8.setText("DNI");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(23, 23, 23)
                                .addComponent(jRButtonEstado))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(jDateNacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonClean, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonAct, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel7))
                                .addGap(17, 17, 17)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jTextDni, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextNombre, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                                    .addComponent(jTextApellido)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(70, 70, 70)
                                .addComponent(jButtonBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(18, 18, 18))
            .addGroup(layout.createSequentialGroup()
                .addGap(201, 201, 201)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jTextNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jTextApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jButtonGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jButtonBorrar)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRButtonEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAct)
                        .addGap(28, 28, 28)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jDateNacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4))
                    .addComponent(jButtonClean, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textIDActionPerformed
    
    
    
    
    private void jButtonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarActionPerformed
        // Obtengo los primeros datos. trim() elimina los espacios que podría poner el usuario por error.
        try{
            String nombre = jTextNombre.getText().trim();
            String apellido = jTextApellido.getText().trim();
            String dnistr = jTextDni.getText().trim();
            
            
            //isEmpty() comprueba si hay algún valor en dichas variables. 
            if(nombre.isEmpty() || apellido.isEmpty() || dnistr.isEmpty()){
                JOptionPane.showMessageDialog(this, "Debe completar nombre, apellido y DNI");
                return;
            }
            
            
            //Ahora comprobaremos que en el nombre haya solo letras o espacios con el método matches que evalúa el string devolviendo true si hay coincidencia. 
            //El \\p{L} es una expresión regular que permite valores del alfabeto latino, cirílico, etc.
            //Podría usarse de expresión regular [a-zA-ZáéíóúÁÉÍÓÚñÑ '\\-]+ que tomaría todas las letras del español y los espacios.
            //El ^ y $ indican que toda la cadena completa debe cumplir con la Regex. 
            if(!nombre.matches("^[\\p{L} ]+$")){
                JOptionPane.showMessageDialog(this, "El nombre solo puede contener letras");
                return;
            }
            
            //Aquí son las mismas anotaciones que en nombre. 
            if(!apellido.matches("^[\\p{L} ]+$")){
                JOptionPane.showMessageDialog(this, "El Apellido Solo puede contener letras");
                return;
            }
            
            //Se usa la regex \\d+ que significa que significa que puede contener números por \d y el + indica que tiene que tener 1 o más dígitos. 
            if(!dnistr.matches("\\d+")){
                JOptionPane.showMessageDialog(this, "El DNI solo puede contener números");
                return;
            }
            
            if(dnistr.length() != 8){
                JOptionPane.showMessageDialog(this, "El DNI debe contener 8 dígitos");
                return;
            }
            
            int dni = Integer.parseInt(dnistr);
            
            Date fechaDate = jDateNacimiento.getDate();
            if(fechaDate == null){
                JOptionPane.showMessageDialog(this, "Debe seleccionar una fecha de nacimiento");
                return;
            }
            
            LocalDate fechaNacimiento = fechaDate.toInstant()
                    .atZone(ZoneId.systemDefault())
                    .toLocalDate();
            
            if(fechaNacimiento.isAfter(LocalDate.now())){
                JOptionPane.showMessageDialog(this, "La fecha no puede ser posterior a hoy");
                return;
            }
            
            if(fechaNacimiento.isBefore(LocalDate.of(1920, 1, 1))){
                JOptionPane.showMessageDialog(this, "La fecha debe ser superior al año 1920");
                return;
            }
            
            Boolean estado = jRButtonEstado.isSelected();
            
            Alumno alumno = new Alumno(nombre, apellido, dni, fechaNacimiento, estado);
            
            
            alumnoData.insertarAlumno(alumno);
            
            JOptionPane.showMessageDialog(this, "Alumno guardado correctamente con ID: " + alumno.getIdAlumno());
            
            
            
            limpiarCampos();
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Error al guardar alumno: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonGuardarActionPerformed

    private void jButtonActActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonActActionPerformed
            try{
                String idStr = textID.getText().trim();
                String nombre = jTextNombre.getText().trim();
                String apellido = jTextApellido.getText().trim();
                String dnistr = jTextDni.getText().trim();
            
            
            //isEmpty() comprueba si hay algún valor en dichas variables. 
            if(nombre.isEmpty() || apellido.isEmpty() || dnistr.isEmpty()){
                JOptionPane.showMessageDialog(this, "Debe completar nombre, apellido y DNI");
                return;
            }
            
            if (!idStr.matches("\\d+")) {
                JOptionPane.showMessageDialog(this, "El ID debe ser numérico");
                return;
            }
                        
            //Ahora comprobaremos que en el nombre haya solo letras o espacios con el método matches que evalúa el string devolviendo true si hay coincidencia. 
            //El \\p{L} es una expresión regular que permite valores del alfabeto latino, cirílico, etc.
            //Podría usarse de expresión regular [a-zA-ZáéíóúÁÉÍÓÚñÑ '\\-]+ que tomaría todas las letras del español y los espacios.
            //El ^ y $ indican que toda la cadena completa debe cumplir con la Regex. 
            if(!nombre.matches("^[\\p{L} ]+$")){
                JOptionPane.showMessageDialog(this, "El nombre solo puede contener letras");
                return;
            }
            
            //Aquí son las mismas anotaciones que en nombre. 
            if(!apellido.matches("^[\\p{L} ]+$")){
                JOptionPane.showMessageDialog(this, "El Apellido Solo puede contener letras");
                return;
            }
            
            //Se usa la regex \\d+ que significa que significa que puede contener números por \d y el + indica que tiene que tener 1 o más dígitos. 
            if(!dnistr.matches("\\d+")){
                JOptionPane.showMessageDialog(this, "El DNI solo puede contener números");
                return;
            }
            
            if(dnistr.length() != 8){
                JOptionPane.showMessageDialog(this, "El DNI debe contener 8 dígitos");
                return;
            }
            
            int id = Integer.parseInt(idStr);
            int dni = Integer.parseInt(dnistr);
            
            Date fechaDate = jDateNacimiento.getDate();
            if(fechaDate == null){
                JOptionPane.showMessageDialog(this, "Debe seleccionar una fecha de nacimiento");
                return;
            }
            
            LocalDate fechaNacimiento = fechaDate.toInstant()
                    .atZone(ZoneId.systemDefault())
                    .toLocalDate();
            
            if(fechaNacimiento.isAfter(LocalDate.now())){
                JOptionPane.showMessageDialog(this, "La fecha no puede ser posterior a hoy");
                return;
            }
            
            if(fechaNacimiento.isBefore(LocalDate.of(1920, 1, 1))){
                JOptionPane.showMessageDialog(this, "La fecha debe ser superior al año 1920");
                return;
            }
            
            Boolean estado = jRButtonEstado.isSelected();
            
            Alumno alumno = new Alumno(id, nombre, apellido, dni, fechaNacimiento, estado);
            

            alumnoData.actualizarAlumno(alumno);
            
            JOptionPane.showMessageDialog(this, "Alumno Actualizado correctamente");
            
            limpiarCampos();
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Error al guardar alumno: " + e.getMessage());
            e.printStackTrace();
        }
        
            
    }//GEN-LAST:event_jButtonActActionPerformed

    private void jButtonBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBorrarActionPerformed
        // TODO add your handling code here:
        String idStr =  textID.getText().trim();
        
        if(idStr.isEmpty()){
            JOptionPane.showMessageDialog(this, "Debe ingresar un ID para eliminar");
            return;
        }
        try{
            int id = Integer.parseInt(idStr);
            
            int opcion = JOptionPane.showConfirmDialog(this, 
                    "¿Está seguro que desea eliminar el alumno con el id " + id +"?",
                    "Confirmar eliminación",
                    JOptionPane.YES_NO_OPTION);
            if(opcion == JOptionPane.YES_OPTION){
                alumnoData.eliminarAlumno(id);
                limpiarCampos();
                JOptionPane.showMessageDialog(this, "Alumno Eliminado correctamente");
            }
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(this, "El ID debe ser un número válido");
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this, "Error al eliminar alumno " + ex.getMessage());
        }
        
    }//GEN-LAST:event_jButtonBorrarActionPerformed

    private void jButtonCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCleanActionPerformed
        // TODO add your handling code here:
        limpiarCampos();
    }//GEN-LAST:event_jButtonCleanActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAct;
    private javax.swing.JButton jButtonBorrar;
    private javax.swing.JButton jButtonClean;
    private javax.swing.JButton jButtonGuardar;
    private com.toedter.calendar.JDateChooser jDateNacimiento;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRButtonEstado;
    private javax.swing.JTextField jTextApellido;
    private javax.swing.JTextField jTextDni;
    private javax.swing.JTextField jTextNombre;
    private javax.swing.JTextField textID;
    // End of variables declaration//GEN-END:variables

    private void limpiarCampos() {
        textID.setText("");
        jTextNombre.setText("");
        jTextApellido.setText("");
        jTextDni.setText("");
        jDateNacimiento.setDate(null);
        jRButtonEstado.setSelected(false);
    }
}
